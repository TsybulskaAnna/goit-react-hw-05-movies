{"version":3,"file":"static/js/16.e5c56647.chunk.js","mappings":"0UAEMA,E,MAAMC,GAAAA,OAAa,CACvBC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAU,kCAEVC,EAAa,mCAAG,sGACJN,EAAIO,IAAI,oBAAqB,CAClDC,OAAQ,CACNC,KAAM,KAHiB,uBACnBC,EADmB,EACnBA,KADmB,kBAMpBA,GANoB,2CAAH,qDAQbC,EAAiB,mCAAG,WAAMC,GAAN,yFACRZ,EAAIO,IAAJ,iBAAkBK,EAAlB,aADQ,uBACvBF,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAIjBG,EAAY,mCAAG,WAAMD,GAAN,yFACHZ,EAAIO,IAAJ,iBAAkBK,IADf,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAIZI,EAAgB,mCAAG,WAAMC,GAAN,yFACPf,EAAIO,IAAJ,gBAAyB,CAC9CJ,OAAQ,CACNY,MAAAA,KAH0B,uBACtBL,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,sDAQhBM,EAAc,mCAAG,WAAMJ,GAAN,yFACLZ,EAAIO,IAAJ,iBAAkBK,EAAlB,aADK,uBACpBF,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,uD,mJCjCrBO,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnBC,QAAQC,IAAIF,GACZ,IACMG,EAAWH,EAAKI,KAAI,SAAAC,GAAE,OAC1B,2BACIA,EAAGC,eAAgB,gBAAMC,IAAI,cAC9BF,EAAGC,eAAgB,gBAAKE,IAJb,kCAI4BH,EAAGC,aAAcC,IAAKF,EAAGI,QACjE,uBAAIJ,EAAGK,iBACP,4CAAeL,EAAGM,eAJXN,EAAGX,OAOd,OAAO,8BAAGkB,QAAQZ,EAAKa,UAAW,wBAAKV,OAGzC,IAEAJ,EAAUe,aAAe,CACvBd,KAAM,I,cC+BR,MA5CA,WACE,OAAgCe,EAAAA,EAAAA,UAAS,CACvCf,KAAM,GACNgB,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAiBC,EAAjB,KAKQzB,GAAO0B,EAAAA,EAAAA,MAAP1B,IAER2B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBH,GAAY,SAAAI,GAAI,yBACXA,GADW,IAEdP,SAAS,OAHK,mBAMKlB,EAAAA,EAAAA,IAAeJ,GANpB,OAMRF,EANQ,OAQd2B,GAAY,SAAAI,GAAI,yBACXA,GADW,IAEdP,SAAS,EACThB,KAAMR,EAAKQ,UAXC,gDAcdmB,GAAY,SAAAI,GAAI,yBACXA,GADW,IAEdP,SAAS,EACTC,MAAO,KAAIO,aAjBC,yDAAH,qDAqBfF,EAAU5B,KACT,CAACA,IAEJ,IAAQM,EAAyBkB,EAAzBlB,KAAMgB,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MAEvB,OACE,gCACGD,IAAW,uCACZ,SAAC,EAAD,CAAWhB,KAAMA,IAChBiB,IAAS,uBAAIA","sources":["api/fetchAPI.js","pages/CastItems/CastItems.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '45b0b261b921954ac82a34bd1131a569',\n  },\n});\n\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrending = async () => {\n  const { data } = await api.get('/trending/all/day', {\n    parans: {\n      page: 1,\n    },\n  });\n  return data;\n};\nexport const fetchMovieReviews = async id => {\n  const { data } = await api.get(`/movie/${id}/reviews`);\n  return data;\n};\nexport const fetchMovieID = async id => {\n  const { data } = await api.get(`/movie/${id}`);\n  return data;\n};\nexport const fechMovieByQuery = async query => {\n  const { data } = await api.get(`search/movie/`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\nexport const fetchMovieCast = async id => {\n  const { data } = await api.get(`/movie/${id}/credits`);\n  return data;\n};\n","import PropTypes from 'prop-types';\n\nconst CastItems = ({ cast }) => {\n  console.log(cast);\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n  const elements = cast.map(el => (\n    <li key={el.id}>\n      {!el.profile_path && <img  alt=\"no poster\" />}\n      {el.profile_path && <img src={IMG_URL + el.profile_path} alt={el.name} />}\n      <p>{el.original_name}</p>\n      <p>Charaсter: {el.character}</p>\n    </li>\n  ));\n  return <>{Boolean(cast.length) && <ul>{elements}</ul>}</>;\n};\n\nexport default CastItems;\n\nCastItems.dafaultProps = {\n  cast: [],\n};\n\nCastItems.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      original_name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport CastItems from 'pages/CastItems';\nimport { fetchMovieCast } from 'api/fetchAPI';\n\nfunction Cast() {\n  const [castData, setСastData] = useState({\n    cast: [],\n    loading: false,\n    error: null,\n  });\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setСastData(prev => ({\n        ...prev,\n        loading: true,\n      }));\n      try {\n        const data = await fetchMovieCast(id);\n\n        setСastData(prev => ({\n          ...prev,\n          loading: false,\n          cast: data.cast,\n        }));\n      } catch (err) {\n        setСastData(prev => ({\n          ...prev,\n          loading: false,\n          error: err.message,\n        }));\n      }\n    };\n    fetchCast(id);\n  }, [id]);\n\n  const { cast, loading, error } = castData;\n\n  return (\n    <>\n      {loading && <p>...Loading</p>}\n      <CastItems cast={cast} />\n      {error && <p>{error}</p>}\n    </>\n  );\n}\n\nexport default Cast;"],"names":["api","axios","baseURL","params","api_key","IMG_URL","fetchTrending","get","parans","page","data","fetchMovieReviews","id","fetchMovieID","fechMovieByQuery","query","fetchMovieCast","CastItems","cast","console","log","elements","map","el","profile_path","alt","src","name","original_name","character","Boolean","length","dafaultProps","useState","loading","error","castData","setСastData","useParams","useEffect","fetchCast","prev","message"],"sourceRoot":""}