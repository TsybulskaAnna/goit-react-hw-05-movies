{"version":3,"file":"static/js/224.5fe0ee8d.chunk.js","mappings":"2UAEMA,E,MAAMC,GAAAA,OAAa,CACvBC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAU,kCAEVC,EAAa,mCAAG,sGACJN,EAAIO,IAAI,oBAAqB,CAClDC,OAAQ,CACNC,KAAM,KAHiB,uBACnBC,EADmB,EACnBA,KADmB,kBAMpBA,GANoB,2CAAH,qDAQbC,EAAiB,mCAAG,WAAMC,GAAN,yFACRZ,EAAIO,IAAJ,iBAAkBK,EAAlB,aADQ,uBACvBF,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAIjBG,EAAY,mCAAG,WAAMD,GAAN,yFACHZ,EAAIO,IAAJ,iBAAkBK,IADf,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAIZI,EAAgB,mCAAG,WAAMC,GAAN,yFACPf,EAAIO,IAAJ,gBAAyB,CAC9CJ,OAAQ,CACNY,MAAAA,KAH0B,uBACtBL,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,sDAQhBM,EAAc,mCAAG,WAAMJ,GAAN,yFACLZ,EAAIO,IAAJ,iBAAkBK,EAAlB,aADK,uBACpBF,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,uD,0IClC3B,EAAuB,2BAAvB,EAAyD,2BAAzD,EAA6F,6B,SCG7F,SAASO,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QAChBC,EAAWD,EAAQE,KAAI,SAAAC,GAAE,OAC7B,gBAAgBC,UAAWC,EAA3B,WACE,gBAAID,UAAWC,EAAf,qBAAkCF,EAAGG,WACrC,uBAAIH,EAAGI,YAFAJ,EAAGT,OAKd,OACE,8BAAGc,QAAQR,EAAQS,UAAW,eAAIL,UAAWC,EAAf,SAAwBJ,MAI1D,QAEAF,EAAaW,aAAe,CAC1BV,QAAS,I,cCiCX,MA5CA,WACE,OAAsCW,EAAAA,EAAAA,UAAS,CAC7CX,QAAS,GACTY,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAoBC,EAApB,KAKQrB,GAAOsB,EAAAA,EAAAA,MAAPtB,IAERuB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBH,GAAe,SAAAI,GAAI,yBACdA,GADc,IAEjBP,SAAS,OAHQ,mBAMEnB,EAAAA,EAAAA,IAAkBC,GANpB,OAMXF,EANW,OAQjBuB,GAAe,SAAAI,GAAI,yBACdA,GADc,IAEjBP,SAAS,EACTZ,QAASR,EAAK4B,aAXC,gDAcjBL,GAAe,SAAAI,GAAI,yBACdA,GADc,IAEjBP,SAAS,EACTC,MAAO,KAAIQ,aAjBI,yDAAH,qDAqBlBH,EAAaxB,KACZ,CAACA,IAEJ,IAAQM,EAA4Bc,EAA5Bd,QAASY,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MAE1B,OACE,gCACGD,IAAW,uCACZ,SAAC,EAAD,CAAcZ,QAASA,IACtBa,IAAS,uBAAIA","sources":["api/fetchAPI.js","webpack://react-homework-template/./src/pages/ReviewsItems/reviewsItems.module.css?6e7e","pages/ReviewsItems/ReviewsItems.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '45b0b261b921954ac82a34bd1131a569',\n  },\n});\n\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrending = async () => {\n  const { data } = await api.get('/trending/all/day', {\n    parans: {\n      page: 1,\n    },\n  });\n  return data;\n};\nexport const fetchMovieReviews = async id => {\n  const { data } = await api.get(`/movie/${id}/reviews`);\n  return data;\n};\nexport const fetchMovieID = async id => {\n  const { data } = await api.get(`/movie/${id}`);\n  return data;\n};\nexport const fechMovieByQuery = async query => {\n  const { data } = await api.get(`search/movie/`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\nexport const fetchMovieCast = async id => {\n  const { data } = await api.get(`/movie/${id}/credits`);\n  return data;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"reviewsItems_list__N3nM9\",\"item\":\"reviewsItems_item__Jt3ti\",\"author\":\"reviewsItems_author__jixtw\"};","import PropTypes from 'prop-types';\n\nimport s from './reviewsItems.module.css';\n\nfunction ReviewsItems({ reviews }) {\n  const elements = reviews.map(el => (\n    <li key={el.id} className={s.item}>\n      <h3 className={s.author}>Author: {el.author}</h3>\n      <p>{el.content}</p>\n    </li>\n  ));\n  return (\n    <>{Boolean(reviews.length) && <ul className={s.list}>{elements}</ul>}</>\n  );\n}\n\nexport default ReviewsItems;\n\nReviewsItems.dafaultProps = {\n  reviews: [],\n};\n\nReviewsItems.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};","\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport ReviewsItems from 'pages/ReviewsItems';\n\nimport { fetchMovieReviews } from 'api/fetchAPI';\n\nfunction ReviewsPage() {\n  const [reviewsData, setReviewsData] = useState({\n    reviews: [],\n    loading: false,\n    error: null,\n  });\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      setReviewsData(prev => ({\n        ...prev,\n        loading: true,\n      }));\n      try {\n        const data = await fetchMovieReviews(id);\n\n        setReviewsData(prev => ({\n          ...prev,\n          loading: false,\n          reviews: data.results,\n        }));\n      } catch (err) {\n        setReviewsData(prev => ({\n          ...prev,\n          loading: false,\n          error: err.message,\n        }));\n      }\n    };\n    fetchReviews(id);\n  }, [id]);\n\n  const { reviews, loading, error } = reviewsData;\n\n  return (\n    <>\n      {loading && <p>...Loading</p>}\n      <ReviewsItems reviews={reviews} />\n      {error && <p>{error}</p>}\n    </>\n  );\n}\n\nexport default ReviewsPage;"],"names":["api","axios","baseURL","params","api_key","IMG_URL","fetchTrending","get","parans","page","data","fetchMovieReviews","id","fetchMovieID","fechMovieByQuery","query","fetchMovieCast","ReviewsItems","reviews","elements","map","el","className","s","author","content","Boolean","length","dafaultProps","useState","loading","error","reviewsData","setReviewsData","useParams","useEffect","fetchReviews","prev","results","message"],"sourceRoot":""}